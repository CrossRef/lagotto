<% if can?(:manage, ErrorMessage) && (controller.action_name == "edit" or (controller.action_name == "update" && !@source.errors.empty?)) %>

  <%= simple_form_for([:admin, @source.becomes(Source)], :url => admin_source_path(@source.name), :html => { :class => 'form-horizontal', :remote => true }) do |f| %>
    <% f.object = @source.becomes(@source.class) %>
    <fieldset>
      <legend>Edit Source</legend>

      <%= f.input :display_name, :input_html => { :class => "span3" } %>
      <%= f.association :group, :include_blank => false %>
      <%= f.input :active, :as => :boolean %>
      <%= f.input :description, :input_html => { :rows => 3, :class => "span9" } %>

      <% if not @source.get_config_fields.empty? %>
        <% @source.get_config_fields.each do |field| %>
          <% if field[:field_type] == "check_box" %>
            <%= f.input field[:field_name], :label => field[:field_name].gsub(/_/, " ").capitalize %>
          <% elsif field[:field_type] == "text_field" %>
            <%= f.input field[:field_name], :input_html => { :class => "span9" } %>
          <% elsif field[:field_type] == "text_area" %>
            <%= f.input field[:field_name], :input_html => { :rows => (field[:size] ? field[:size] : 2), :class => "span9" } %>
          <% elsif field[:field_type] == "password_field" %>
            <%= f.input field[:field_name], :value => @source.config.send(field[:field_name]) %>
          <% end %>
        <% end %>
      <% end %>

      <%= f.input :job_batch_size, :as => :numeric, label: "Job queue",
                                                    input_html: { class: "input-mini" },
                                                    hint: "Number of articles queued per job" %>
      <%= f.input :batch_time_interval, collection: Source::INTERVAL_OPTIONS,
                                                    label: false,
                                                    include_blank: false,
                                                    input_html: { class: "span2" },
                                                    hint: "Batch job interval" %>
      <%= f.input :max_job_batch_size, :as => :numeric, label: false,
                                                    input_html: { class: "input-mini" },
                                                    hint: "Max. requests per batch job" %>

      <%= f.input :wait_time, label: false,
                              input_html: { class: "input-mini" },
                              hint: "Time interval before more jobs can be added to the job queue (seconds)" %>

      <%= f.input :staleness_week,  collection: Source::INTERVAL_OPTIONS,
                                    label: "Update interval",
                                    include_blank: false,
                                    input_html: { class: "span2" },
                                    hint: "First 7 days after publication" %>
      <%= f.input :staleness_month, collection: Source::INTERVAL_OPTIONS,
                                    label: false,
                                    include_blank: false,
                                    input_html: { class: "span2" },
                                    hint: "First 31 days after publication" %>
      <%= f.input :staleness_year,  collection: Source::INTERVAL_OPTIONS,
                                    label: false,
                                    include_blank: false,
                                    input_html: { class: "span2" },
                                    hint: "First year after publication" %>
      <%= f.input :staleness_all,   collection: Source::INTERVAL_OPTIONS,
                                    label: false,
                                    include_blank: false,
                                    input_html: { class: "span2" },
                                    hint: "More than one year after publication" %>

      <%= f.input :timeout, input_html: { class: "input-mini" },
                            hint: "Time to wait for response from the source (seconds)"  %>

      <%= f.input :max_failed_queries, label: "Failed queries",
                                       input_html: { class: "input-mini" },
                                       hint: "Maximum number of failed queries allowed before being disabled" %>
      <%= f.input :max_failed_query_time_interval, collection: Source::INTERVAL_OPTIONS,
                                                   label: false,
                                                   include_blank: false,
                                                   input_html: { class: "span2" },
                                                   hint: "Time interval for maximum number of failed queries" %>
      <%= f.input :disable_delay, label: false,
                                  input_html: { class: "input-mini" },
                                  hint: "Time interval before source is disabled after maximum number of failed queries is reached (seconds)" %>

      <div class="form-actions">
        <%= f.submit "Save ", class: "btn btn-primary" %>
        <%= link_to 'Cancel', admin_source_path(@source.name), { :remote => true, :class => 'btn' } %>
      </div>
    </fieldset>
  <% end %>

<% else %>
  <div class="btn-toolbar pull-right">
    <% if can?(:manage, ErrorMessage) %>
      <%= link_to '<i class="icon-pencil"></i> Edit'.html_safe, edit_admin_source_path(@source.name), { :remote => true, :class => 'btn btn-mini', :title => "Edit" } %>
      <% end %>
  </div>
  <table class="table table-striped">
    <thead>
    </thead>
    <tbody>
      <% unless @source.get_config_fields.empty? %>
        <% @source.get_config_fields.each do |field| %>
          <tr>
            <th><%= field[:field_name].gsub(/_/, " ").capitalize %></th>
            <td>
              <% if field[:field_type] == "password_field" %>
                '<%= ("●" * @source.config.send(field[:field_name]).to_s.size) %>'
              <% else %>
                <%= @source.config.send(field[:field_name]) %>
              <% end %>
            </td>
          </tr>
        <% end %>
      <% end %>
      <tr>
        <th>Job queue</th>
        <td>
          <%= @source.rate_limiting %> per hour rate-limiting:</br>
          <%= distance_of_time(@source.batch_time_interval) %> between batch jobs</br>
          Max. <%= @source.max_job_batch_size %> articles per batch job interval</br></br>
          <%= @source.job_batch_size %> articles per job</br>
          <%= @source.wait_time %> seconds before more jobs can be added</br>
        </td>
      </tr>
      <tr>
        <th>Update interval</th>
        <td><%= @source.staleness_with_limits.map { |i, j| distance_of_time(j) + " for articles published #{i}" }.join("</br>").html_safe %></td>
      </tr>
      <tr>
        <th>Timeout</th>
        <td><%=h @source.timeout %> seconds wait time for response from the source</td>
      </tr>
      <tr>
        <th>Failed queries</th>
        <td>
          <%= @source.max_failed_queries %> failed queries allowed before source is disabled</br>
          <%= distance_of_time(@source.max_failed_query_time_interval) %> interval for checking maximum number of failed queries</br>
          <%= @source.disable_delay %> seconds before source is disabled after maximum number of failed queries is reached
        </td>
      </tr>
    </tbody>
  </table>
<% end %>
